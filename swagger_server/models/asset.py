# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.asset_details import AssetDetails
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Asset(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, _class: str=None, details: List[AssetDetails]=None):
        """
        Asset - a model defined in Swagger

        :param name: The name of this Asset.
        :type name: str
        :param type: The type of this Asset.
        :type type: str
        :param _class: The _class of this Asset.
        :type _class: str
        :param details: The details of this Asset.
        :type details: List[AssetDetails]
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            '_class': str,
            'details': List[AssetDetails]
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            '_class': 'class',
            'details': 'details'
        }

        self._name = name
        self._type = type
        self.__class = _class
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'Asset':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The asset of this Asset.
        :rtype: Asset
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this Asset.
        Unique ASCII alphanumeric string 4-64 characters long may include - and _ in all positions except first

        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Asset.
        Unique ASCII alphanumeric string 4-64 characters long may include - and _ in all positions except first

        :param name: The name of this Asset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self) -> str:
        """
        Gets the type of this Asset.
        Asset type Satellite or Antenna

        :return: The type of this Asset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this Asset.
        Asset type Satellite or Antenna

        :param type: The type of this Asset.
        :type type: str
        """
        allowed_values = ["satellite", "antenna"]
        if type.lower() not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type.lower()

    @property
    def _class(self) -> str:
        """
        Gets the _class of this Asset.
        Asset class:  dove or rapideye if satellite; dish or yagi if antenna.

        :return: The _class of this Asset.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """
        Sets the _class of this Asset.
        Asset class:  dove or rapideye if satellite; dish or yagi if antenna.

        :param _class: The _class of this Asset.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")

        self.__class = _class.lower()

    @property
    def details(self) -> List[AssetDetails]:
        """
        Gets the details of this Asset.

        :return: The details of this Asset.
        :rtype: List[AssetDetails]
        """
        return self._details

    @details.setter
    def details(self, details: List[AssetDetails]):
        """
        Sets the details of this Asset.

        :param details: The details of this Asset.
        :type details: List[AssetDetails]
        """

        self._details = details
